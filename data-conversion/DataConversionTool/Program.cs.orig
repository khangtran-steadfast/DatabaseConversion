using DataConversion;
using DataConversion.DatabaseMapper;
using DataConversion.DatabaseMapper.DataValidation;
using DataConversion.DatabaseMapper.ErrorHandler;
using System;
using System.Linq;
using System.Collections.Generic;
using DataConversion.DatabaseMapper.DataValidation.Orphan;
namespace DataConversionTool
{
    class Program
    {
        static void Main(string[] args)
        {
<<<<<<< HEAD
            //
            // Initialize source and destination database
=======
            LicenseAspose();

>>>>>>> upstream/master
            DataConversion.LogService.Initialize(typeof(Program));
            EclipseDatabase source = new EclipseDatabase();
            BOALedgerDatabase destination = new BOALedgerDatabase();
<<<<<<< HEAD
            

            //
            // Check we need to validate or not
            if (args.Contains("/report-data-errors"))
            {
                LogService.Log.Info("Running data validation.");
                ValidationManager validationManager = new ValidationManager();
                validationManager.Validate<OrphanRecordValidation>(source, destination);
                return;
            }

=======
            //destination.ConfigListTableToMap(new List<string> { "gen_ins_documents" });
>>>>>>> upstream/master

            //
            // Start mapping
            source.ConfigureAutoMapper(new EclipseToBOALedgerProfile());
            try
            {
                source.StartMap(destination);
            }
            catch (Exception exc)
            {
                LogService.Log.Error("Error occurs when mapping. Terminated.", exc);
            }
<<<<<<< HEAD
=======

            //Utils.Task_GetRelatedTable("gen_ins_documents", "I:\\Test.txt");
        }

        private static void LicenseAspose()
        {
            Aspose.Words.License word = new Aspose.Words.License();
            word.SetLicense("Aspose.Total.lic");

            Aspose.Cells.License excel = new Aspose.Cells.License();
            excel.SetLicense("Aspose.Total.lic");
>>>>>>> upstream/master
        }
    }
}
